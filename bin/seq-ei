#!/usr/bin/env node

var program = require('commander');
var Link = require('../');
var path = require('path');
var fs = require('fs');
var _ = require('lodash');
var colors = require('colors');

program
  .version('0.l.7')
  .usage('Create models by database or Create tables by models')
  .option('-r, --reverse', 'is generate model files or generate tables')
  .option('-H, --host <n>', 'host ip default: 127.0.0.1')
  .option('-u, --user <n>', 'host user default: root')
  .option('-p, --password <n>', 'host password. default: \'\'')
  .option('-d, --database <n>', 'database name')
  .option('-o, --output <dir>', 'select models dir')
  .option('-m, --dialect <n>', 'db type')
  .option('-P, --port <n>', 'db port. default: 3306')
  .option('-c, --config <file>', 'config file')
  .option('-C, --camel', 'convert tableName and file to camelCase')
  .option('-e, --compile <type>', 'model file type')
  .option('-s, --space <n>', 'you can select 2 space or 4 space', parseInt)
  .option('--no-default-value', 'exclude default data values')
  .parse(process.argv);

var options = {
  host: program.host || '127.0.0.1',
  dialect: program.dialect || 'mysql',
  port: program.port || 3306,
  database: program.database,
  user: program.user || 'root',
  reverse: program.reverse || false,
  password: program.password || '',
  dir: program.output || path.resolve(process.cwd()) + '/models',
  logging: false,
  define: {
    timestamps: true,
    createdAt: 'create_time',
    updatedAt: 'update_time'
  },
  exportDefaultValue: program.defaultValue,
  camel: program.camel || false
}

if (program.config) {
  optionsData = require(path.resolve(process.cwd(), program.config));
  options = _.extend(options, optionsData);
}

if (!options.database) {
  console.log(colors.red('database name(-d) is needed'));
  process.exit(0);
}

if (!options.database) {
  program.help()
}

if (options.reverse) {
  modelImport = new Link.ModelImport(options);
  modelImport.generateTables().then(function () {
    process.exit(0)
  });
} else {
  options.space = program.space || options.space || 2;
  options.outputFileType = program.compile || options.compile || 'coffee';

  modelExport = new Link.ModelExport(options);
  modelExport.createModels().then(function () {
    process.exit(0)
  });
}